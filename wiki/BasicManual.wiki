#summary Overview of the package
#labels Featured,Phase-Deploy

=Client=
Next code is the sample application that generates some log events when you click on button.
{{{
<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" applicationComplete="init()">
    <mx:Script><![CDATA[
        import mx.logging.LogEventLevel;
        import org.room13.slf4fx.Slf4FxLoggingTarget;
        import mx.logging.Log;
        import mx.logging.ILogger;

        private var _log : ILogger = Log.getLogger("org.room13.slf4fx.MyApplication");

        private function init() : void {
            Log.addTarget(new Slf4FxLoggingTarget("myApplication", "mySecret"));
        }

        private function generateLogRecords() : void {
            _log.debug("level={0} {1}", LogEventLevel.DEBUG, "**DEBUG**");
            _log.info("level={0} {1}", LogEventLevel.INFO, "**INFO**");
            _log.warn("level={0} {1}", LogEventLevel.WARN, "**WARN**");
            _log.error("level={0} {1}", LogEventLevel.ERROR, "**ERROR**");
            _log.fatal("level={0} {1}", LogEventLevel.FATAL, "**FATAL**");
        }
        ]]></mx:Script>
    <mx:Button label="Generate log records" x="20" y="20" click="generateLogRecords()"/>
</mx:Application>
}}}

=Server=

==Start server==
To start server with default configuration execute command `java -jar slf4fx-server.jar`  from command line (run cmd.exe on Windows, open Terminal application on MacOSX, open your favorite terminal elsewhere)
{{{
00:46:32.410 INFO  SLF4FxServer : slf4fx (version 1.2-SNAPSHOT)
00:46:32.411 INFO  SLF4FxServer : session timeout is 60 seconds
00:46:32.411 INFO  SLF4FxServer : reader buffer size is 1024
00:46:32.411 INFO  SLF4FxServer : known applications []
00:46:32.411 INFO  SLF4FxServer : support for <policy-file-request/> is disabled
00:46:32.412 INFO  SLF4FxServer : listen localhost/127.0.0.1:18888
00:46:32.423 INFO  SLF4FxServer : server started in 529ms
}}}
Server will output all log events to console and all records with `slf4fx.*` category to `flex.log` file.

==Stop server==
To stop server just press `Control-C` in server window (terminal window with running server).

==Configure server==
Configuration is easy - just provide additional options in server command line. The command `java -jar slf4fx-server.jar --help`prints list of available options
{{{
usage: java -jar slf4fx-server.jar [OPTIONS]
Version 1.2-SNAPSHOT
 -b,--bind <ADDRESS[:PORT]>        bind SLF4Fx server to this address
 -h,--help                         print this message
 -k,--known-applications <FILE>    known applications descriptor file(one pair
                                   APPLICATION=SECRET per line)
 -p,--policy-file <FILE>           socket policy file for Adobe Flash Player
 -r,--reader-buffer-size <BYTES>   protocol decoder buffer size
 -t,--session-timeout <TIMEOUT>    session timeout in seconds
}}}

==Configure logging==
Standalone SLF4FFx server (from binaries) uses log4j for logging all events. All log events from applications will have
category named as:
{{{
slf4fx.APPLICATION_ID.LOG_RECORD_CATEGORY
}}}
Where `APPLICATION_ID` is application name given as parameter to `Slf4FxLoggingTarget` on client side and `LOG_RECORD_CATEGORY` is logger category on client side.
Following is log of sample application:
{{{
01:06:27.883 DEBUG MyApplication : level=2 **DEBUG**
01:06:27.890 INFO  MyApplication : level=4 **INFO**
01:06:27.890 WARN  MyApplication : level=6 **WARN**
01:06:27.891 ERROR MyApplication : level=8 **ERROR**
01:06:27.891 ERROR MyApplication : level=1000 **FATAL**
}}}